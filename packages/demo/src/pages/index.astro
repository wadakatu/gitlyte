---
import Layout from '../layouts/Layout.astro';
import HeroFocused from '../components/layouts/HeroFocused.astro';
import DocsContent from '../components/DocsContent.astro';

const sampleData = {
  title: "GitLyte Demo Project",
  description: "An innovative solution for modern development challenges with AI-powered features",
  stats: {
    stars: 1234,
    forks: 456,
    issues: 12
  }
};

// パスの設定：本番環境では/gitlyte、開発環境はルートパス
const isProd = import.meta.env.PROD;
const homePath = isProd ? '/gitlyte/' : '/';
const docsPath = isProd ? '/gitlyte/docs' : '/docs';
---

<Layout title="GitLyte Layout Demo - Hero Focused" description="GitLyte レイアウトデモサイト - Hero Focused レイアウト">
  <!-- ナビゲーションヘッダー -->
  <header class="demo-header">
    <div class="container">
      <div class="demo-nav">
        <div class="demo-brand">
          <a href={homePath} class="brand-link">
            <h1>🎨 GitLyte Layout Demo</h1>
          </a>
        </div>
        <div class="nav-controls">
          <div class="page-selector">
            <button id="demo-btn" class="page-btn active">Demo</button>
            <button id="docs-btn" class="page-btn">Docs</button>
          </div>
          <div class="layout-selector">
            <select id="layout-selector" class="layout-select">
              <option value="hero-focused" selected>Hero Focused</option>
              <option value="minimal" disabled>Minimal (Coming Soon)</option>
              <option value="grid" disabled>Grid (Coming Soon)</option>
              <option value="sidebar" disabled>Sidebar (Coming Soon)</option>
              <option value="content-heavy" disabled>Content Heavy (Coming Soon)</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </header>

  <!-- デモ説明 -->
  <section id="demo-section" class="demo-info">
    <div class="container">
      <div class="info-content">
        <h2>🌟 Hero Focused Layout</h2>
        <p>
          Hero Focusedレイアウトは、<strong>大きなヒーローセクション</strong>で訪問者の注意を引きつけ、
          プロジェクトの価値を即座に伝えるデザインです。
        </p>
        <div class="layout-features">
          <div class="feature">
            <span class="feature-icon">🎯</span>
            <span>強力なファーストインプレッション</span>
          </div>
          <div class="feature">
            <span class="feature-icon">📊</span>
            <span>統計情報の視覚的表示</span>
          </div>
          <div class="feature">
            <span class="feature-icon">🚀</span>
            <span>明確なCTAボタン</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- 実際のレイアウトデモ -->
  <main id="demo-content" class="demo-content">
    <HeroFocused 
      title={sampleData.title}
      description={sampleData.description}
      stats={sampleData.stats}
    />
  </main>

  <!-- ドキュメントコンテンツ（初期状態では非表示） -->
  <main id="docs-content" class="docs-content-container" style="display: none;">
    <DocsContent />
  </main>

  <!-- フッター -->
  <footer class="demo-footer">
    <div class="container">
      <p>🤖 GitLyte Layout Demo - AI-powered GitHub Pages generator</p>
      <p><a href="https://github.com/wadakatu/gitlyte" target="_blank" rel="noopener">View on GitHub</a></p>
    </div>
  </footer>
</Layout>

<style>
  .demo-header {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    position: sticky;
    top: 0;
    z-index: 2000;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .demo-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    min-height: 4rem;
  }

  .demo-brand .brand-link {
    text-decoration: none;
    color: inherit;
    transition: opacity 0.2s ease;
  }

  .demo-brand .brand-link:hover {
    opacity: 0.8;
  }

  .demo-brand h1 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
  }

  .nav-controls {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .page-selector {
    display: flex;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.25rem;
    gap: 0.25rem;
  }

  .page-btn {
    background: transparent;
    border: none;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
  }

  .page-btn:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .page-btn.active {
    background: rgba(255, 255, 255, 0.3);
    font-weight: 600;
  }

  .layout-select {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .layout-select:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .layout-select option {
    background: #2d3748;
    color: white;
  }

  .demo-info {
    background: #f8fafc;
    padding: 3rem 0;
    border-bottom: 1px solid #e2e8f0;
  }

  .info-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .info-content h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #2d3748;
  }

  .info-content p {
    font-size: 1.1rem;
    color: #718096;
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .layout-features {
    display: flex;
    gap: 2rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .feature {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    font-weight: 500;
  }

  .feature-icon {
    font-size: 1.2rem;
  }

  .demo-content {
    border: 3px dashed #e2e8f0;
    margin: 2rem;
    border-radius: 12px;
    overflow: hidden;
    background: white;
  }

  .docs-content-container {
    min-height: calc(100vh - 200px);
    background: white;
  }

  .demo-footer {
    background: #2d3748;
    color: white;
    text-align: center;
    padding: 2rem 0;
  }

  .demo-footer p {
    margin: 0.5rem 0;
  }

  .demo-footer a {
    color: #667eea;
    text-decoration: none;
  }

  .demo-footer a:hover {
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .demo-nav {
      flex-direction: column;
      gap: 1rem;
    }

    .demo-brand h1 {
      font-size: 1.25rem;
    }

    .nav-controls {
      flex-direction: column;
      gap: 1rem;
    }

    .layout-features {
      flex-direction: column;
      align-items: center;
    }

    .demo-content {
      margin: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const demoBtn = document.getElementById('demo-btn') as HTMLButtonElement;
    const docsBtn = document.getElementById('docs-btn') as HTMLButtonElement;
    const demoSection = document.getElementById('demo-section') as HTMLElement;
    const demoContent = document.getElementById('demo-content') as HTMLElement;
    const docsContent = document.getElementById('docs-content') as HTMLElement;
    const layoutSelector = document.getElementById('layout-selector') as HTMLSelectElement;
    
    // ページ切り替え機能
    function showDemo() {
      // コンテンツの表示切り替え
      demoSection.style.display = 'block';
      demoContent.style.display = 'block';
      docsContent.style.display = 'none';
      
      // ボタンの状態更新
      demoBtn.classList.add('active');
      docsBtn.classList.remove('active');
      
      // レイアウトセレクターを表示
      layoutSelector.parentElement.style.display = 'block';
    }
    
    function showDocs() {
      // コンテンツの表示切り替え
      demoSection.style.display = 'none';
      demoContent.style.display = 'none';
      docsContent.style.display = 'block';
      
      // ボタンの状態更新
      demoBtn.classList.remove('active');
      docsBtn.classList.add('active');
      
      // レイアウトセレクターを非表示（ドキュメントページでは不要）
      layoutSelector.parentElement.style.display = 'none';
    }
    
    // イベントリスナー
    demoBtn.addEventListener('click', showDemo);
    docsBtn.addEventListener('click', showDocs);
    
    // レイアウト切り替え機能（将来実装予定）
    layoutSelector.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      const selectedLayout = target.value;
      
      // 今後、他のレイアウトページへのナビゲーション機能を追加
      if (selectedLayout !== 'hero-focused') {
        alert(`${selectedLayout} レイアウトは準備中です！`);
        target.value = 'hero-focused';
      }
    });
  });
</script>