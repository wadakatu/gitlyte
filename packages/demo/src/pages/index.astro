---
import Layout from '../layouts/Layout.astro';
import HeroFocused from '../components/layouts/HeroFocused.astro';
import Minimal from '../components/layouts/Minimal.astro';
import DocsContent from '../components/DocsContent.astro';
import MinimalDocs from '../components/MinimalDocs.astro';
import HeroFocusedDocs from '../components/HeroFocusedDocs.astro';

// アイランドコンポーネント（後で追加予定）
// import LayoutSelector from '../components/islands/LayoutSelector.astro';

const sampleData = {
  title: "GitLyte Demo Project",
  description: "An innovative solution for modern development challenges with AI-powered features",
  stats: {
    stars: 1234,
    forks: 456,
    issues: 12
  }
};

// パスの設定：本番環境では/gitlyte、開発環境はルートパス
const isProd = import.meta.env.PROD;
const homePath = isProd ? '/gitlyte/' : '/';
const docsPath = isProd ? '/gitlyte/docs' : '/docs';
---

<Layout title="GitLyte Layout Demo - Hero Focused" description="GitLyte レイアウトデモサイト - Hero Focused レイアウト" layoutType="default">
  <!-- ナビゲーションヘッダー -->
  <header class="demo-header">
    <div class="container">
      <div class="demo-nav">
        <div class="demo-brand">
          <a href={homePath} class="brand-link">
            <h1>🎨 GitLyte Layout Demo</h1>
          </a>
        </div>
        <div class="nav-controls">
          <div class="page-selector">
            <button id="demo-btn" class="page-btn active">Demo</button>
            <button id="docs-btn" class="page-btn">Docs</button>
          </div>
          <div class="layout-selector">
            <select id="layout-selector" class="layout-select">
              <option value="hero-focused" selected>Hero Focused</option>
              <option value="minimal">Minimal</option>
              <option value="grid" disabled>Grid (Coming Soon)</option>
              <option value="sidebar" disabled>Sidebar (Coming Soon)</option>
              <option value="content-heavy" disabled>Content Heavy (Coming Soon)</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </header>

  <!-- デモ説明 -->
  <section id="demo-section" class="demo-info">
    <div class="container">
      <div class="info-content">
        <h2 id="layout-title">🌟 Hero Focused Layout</h2>
        <p id="layout-description">
          Hero Focusedレイアウトは、<strong>大きなヒーローセクション</strong>で訪問者の注意を引きつけ、
          プロジェクトの価値を即座に伝えるデザインです。
        </p>
        <div class="layout-features" id="layout-features">
          <div class="feature">
            <span class="feature-icon">🎯</span>
            <span>強力なファーストインプレッション</span>
          </div>
          <div class="feature">
            <span class="feature-icon">📊</span>
            <span>統計情報の視覚的表示</span>
          </div>
          <div class="feature">
            <span class="feature-icon">🚀</span>
            <span>明確なCTAボタン</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- 実際のレイアウトデモ -->
  <main id="demo-content" class="demo-content">
    <div id="hero-focused-layout">
      <HeroFocused 
        title={sampleData.title}
        description={sampleData.description}
        stats={sampleData.stats}
      />
    </div>
    <div id="minimal-layout" style="display: none;">
      <Minimal 
        title={sampleData.title}
        description={sampleData.description}
        stats={sampleData.stats}
      />
    </div>
    <!-- Minimal Docs Layout (hidden by default) -->
    <div id="minimal-docs-layout" style="display: none;">
      <MinimalDocs />
    </div>
    <!-- Hero Focused Docs Layout (hidden by default) -->
    <div id="hero-focused-docs-layout" style="display: none;">
      <HeroFocusedDocs />
    </div>
  </main>

  <!-- ドキュメントコンテンツ（初期状態では非表示） -->
  <main id="docs-content" class="docs-content-container" style="display: none;">
    <DocsContent />
  </main>

  <!-- フッター -->
  <footer class="demo-footer">
    <div class="container">
      <p>🤖 GitLyte Layout Demo - AI-powered GitHub Pages generator</p>
      <p><a href="https://github.com/wadakatu/gitlyte" target="_blank" rel="noopener">View on GitHub</a></p>
    </div>
  </footer>
</Layout>

<style>
  .demo-header {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    position: sticky;
    top: 0;
    z-index: 2000;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .demo-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    min-height: 4rem;
  }

  .demo-brand .brand-link {
    text-decoration: none;
    color: inherit;
    transition: opacity 0.2s ease;
  }

  .demo-brand .brand-link:hover {
    opacity: 0.8;
  }

  .demo-brand h1 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
  }

  .nav-controls {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .page-selector {
    display: flex;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.25rem;
    gap: 0.25rem;
  }

  .page-btn {
    background: transparent;
    border: none;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
  }

  .page-btn:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .page-btn.active {
    background: rgba(255, 255, 255, 0.3);
    font-weight: 600;
  }

  .layout-select {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .layout-select:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .layout-select option {
    background: #2d3748;
    color: white;
  }

  .demo-info {
    background: #f8fafc;
    padding: 3rem 0;
    border-bottom: 1px solid #e2e8f0;
  }

  .info-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .info-content h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #2d3748;
  }

  .info-content p {
    font-size: 1.1rem;
    color: #718096;
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .layout-features {
    display: flex;
    gap: 2rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .feature {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    font-weight: 500;
  }

  .feature-icon {
    font-size: 1.2rem;
  }




  .demo-content {
    border: 3px dashed #e2e8f0;
    margin: 2rem;
    border-radius: 12px;
    overflow: hidden;
    background: white;
  }

  .docs-content-container {
    min-height: calc(100vh - 200px);
    background: white;
  }

  .demo-footer {
    background: #2d3748;
    color: white;
    text-align: center;
    padding: 2rem 0;
  }

  .demo-footer p {
    margin: 0.5rem 0;
  }

  .demo-footer a {
    color: #667eea;
    text-decoration: none;
  }

  .demo-footer a:hover {
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .demo-nav {
      flex-direction: column;
      gap: 1rem;
    }

    .demo-brand h1 {
      font-size: 1.25rem;
    }

    .nav-controls {
      flex-direction: column;
      gap: 1rem;
    }

    .layout-features {
      flex-direction: column;
      align-items: center;
    }

    .demo-content {
      margin: 1rem;
    }
  }
</style>

  <!-- アイランドアーキテクチャを適用したJavaScript -->
  <script>
    // アイランド1: レイアウトセレクター
    class LayoutSelectorIsland {
      private selector: HTMLSelectElement;
      private onLayoutChange?: (layout: string) => void;

      constructor(selector: HTMLSelectElement) {
        this.selector = selector;
        this.init();
      }

      init() {
        this.selector.addEventListener('change', this.handleChange.bind(this));
      }

      handleChange(e: Event) {
        const target = e.target as HTMLSelectElement;
        const selectedLayout = target.value;
        
        if (this.onLayoutChange) {
          this.onLayoutChange(selectedLayout);
        }
      }

      setOnLayoutChange(callback: (layout: string) => void) {
        this.onLayoutChange = callback;
      }
    }

    // アイランド2: ページセレクター
    class PageSelectorIsland {
      private demoBtn: HTMLButtonElement;
      private docsBtn: HTMLButtonElement;
      private onShowDemo?: () => void;
      private onShowDocs?: () => void;

      constructor() {
        this.demoBtn = document.getElementById('demo-btn') as HTMLButtonElement;
        this.docsBtn = document.getElementById('docs-btn') as HTMLButtonElement;
        this.init();
      }

      init() {
        if (this.demoBtn) {
          this.demoBtn.addEventListener('click', this.handleDemoClick.bind(this));
        }
        if (this.docsBtn) {
          this.docsBtn.addEventListener('click', this.handleDocsClick.bind(this));
        }
      }

      setCallbacks(onShowDemo: () => void, onShowDocs: () => void) {
        this.onShowDemo = onShowDemo;
        this.onShowDocs = onShowDocs;
      }

      private handleDemoClick() {
        this.setActiveButton('demo');
        if (this.onShowDemo) this.onShowDemo();
      }

      private handleDocsClick() {
        this.setActiveButton('docs');
        if (this.onShowDocs) this.onShowDocs();
      }

      private setActiveButton(page: 'demo' | 'docs') {
        this.demoBtn.classList.toggle('active', page === 'demo');
        this.docsBtn.classList.toggle('active', page === 'docs');
      }
    }

    // アイランド3: レイアウト情報アップデーター
    class LayoutInfoIsland {
      private layoutTitle: HTMLElement;
      private layoutDescription: HTMLElement;
      private layoutFeatures: HTMLElement;
      
      private layoutInfo = {
        'hero-focused': {
          title: '🌟 Hero Focused Layout',
          description: 'Hero Focusedレイアウトは、<strong>大きなヒーローセクション</strong>で訪問者の注意を引きつけ、プロジェクトの価値を即座に伝えるデザインです。',
          features: [
            { icon: '🎯', text: '強力なファーストインプレッション' },
            { icon: '📊', text: '統計情報の視覚的表示' },
            { icon: '🚀', text: '明確なCTAボタン' }
          ]
        },
        'minimal': {
          title: '✨ Minimal Layout',
          description: 'Minimalレイアウトは、<strong>クリーンなタイポグラフィ</strong>と余白を活用し、コンテンツの読みやすさを最優先にしたデザインです。',
          features: [
            { icon: '📝', text: 'タイポグラフィ中心の設計' },
            { icon: '🎨', text: 'ミニマルなカラーパレット' },
            { icon: '📱', text: 'アクセシビリティ重視' }
          ]
        }
      };

      constructor() {
        this.layoutTitle = document.getElementById('layout-title') as HTMLElement;
        this.layoutDescription = document.getElementById('layout-description') as HTMLElement;
        this.layoutFeatures = document.getElementById('layout-features') as HTMLElement;
      }

      updateLayoutInfo(layoutType: string) {
        const info = this.layoutInfo[layoutType as keyof typeof this.layoutInfo];
        if (!info) return;

        if (this.layoutTitle) {
          this.layoutTitle.innerHTML = info.title;
        }
        
        if (this.layoutDescription) {
          this.layoutDescription.innerHTML = info.description;
        }
        
        if (this.layoutFeatures) {
          this.layoutFeatures.innerHTML = info.features.map(feature => 
            `<div class="feature">
              <span class="feature-icon">${feature.icon}</span>
              <span>${feature.text}</span>
            </div>`
          ).join('');
        }
      }
    }

    // レガシー機能（後でリファクタリング予定）
    function showDemo() {
      console.log('[Global showDemo] Called');
      const demoSection = document.getElementById('demo-section') as HTMLElement;
      const demoContent = document.getElementById('demo-content') as HTMLElement;
      const docsContent = document.getElementById('docs-content') as HTMLElement;
      
      if (demoSection) demoSection.style.display = 'block';
      if (demoContent) demoContent.style.display = 'block';
      if (docsContent) docsContent.style.display = 'none';
      console.log('[Global showDemo] Switched to demo view');
    }

    function showDocs() {
      console.log('[Global showDocs] Called');
      const demoSection = document.getElementById('demo-section') as HTMLElement;
      const demoContent = document.getElementById('demo-content') as HTMLElement;
      const docsContent = document.getElementById('docs-content') as HTMLElement;
      
      if (demoSection) demoSection.style.display = 'none';
      if (demoContent) demoContent.style.display = 'none';
      if (docsContent) docsContent.style.display = 'block';
      console.log('[Global showDocs] Switched to docs view');
    }

    // グローバル関数として即座に公開
    (window as any).showDemo = showDemo;
    (window as any).showDocs = showDocs;
    console.log('[Global] Functions exposed', { showDemo: typeof (window as any).showDemo, showDocs: typeof (window as any).showDocs });

    // メインコントローラー（アイランド間の調整）
    document.addEventListener('DOMContentLoaded', () => {
      console.log('[DOMContentLoaded] Starting initialization');
      const layoutSelector = document.getElementById('layout-selector') as HTMLSelectElement;
      const demoSection = document.getElementById('demo-section') as HTMLElement;
      const demoContent = document.getElementById('demo-content') as HTMLElement;
      const docsContent = document.getElementById('docs-content') as HTMLElement;

      // アイランドインスタンス作成
      const layoutSelectorIsland = new LayoutSelectorIsland(layoutSelector);
      const pageSelectorIsland = new PageSelectorIsland();
      const layoutInfoIsland = new LayoutInfoIsland();

      // アイランド間の連携設定
      layoutSelectorIsland.setOnLayoutChange((layoutType: string) => {
        console.log('[LayoutSelector] Layout changed to', layoutType);
        // レイアウト情報更新
        layoutInfoIsland.updateLayoutInfo(layoutType);
        // レイアウト切り替え処理（簡略版）
        switchLayout(layoutType);
      });

      pageSelectorIsland.setCallbacks(
        () => showDemo(),  // Demo表示
        () => showDocs()   // Docs表示
      );

      // 初期レイアウトのナビゲーション設定
      const heroFocusedLayout = document.getElementById('hero-focused-layout');
      const heroFocusedDocsLayout = document.getElementById('hero-focused-docs-layout');
      console.log('[DOMContentLoaded] Initial layouts', { 
        heroFocusedLayout: !!heroFocusedLayout, 
        heroFocusedDocsLayout: !!heroFocusedDocsLayout 
      });
      
      if (heroFocusedLayout && heroFocusedDocsLayout) {
        setupLayoutNavigation(heroFocusedLayout, heroFocusedDocsLayout);
      }

      function switchLayout(layoutType: string) {
        const heroFocusedLayout = document.getElementById('hero-focused-layout');
        const minimalLayout = document.getElementById('minimal-layout');
        const heroFocusedDocsLayout = document.getElementById('hero-focused-docs-layout');
        const minimalDocsLayout = document.getElementById('minimal-docs-layout');
        const allLayouts = [heroFocusedLayout, minimalLayout, heroFocusedDocsLayout, minimalDocsLayout];
        
        allLayouts.forEach(layout => {
          if (layout) layout.style.display = 'none';
        });

        if (layoutType === 'minimal' && minimalLayout) {
          minimalLayout.style.display = 'block';
          setupLayoutNavigation(minimalLayout, minimalDocsLayout);
        } else if (layoutType === 'hero-focused' && heroFocusedLayout) {
          heroFocusedLayout.style.display = 'block';
          setupLayoutNavigation(heroFocusedLayout, heroFocusedDocsLayout);
        }
      }

      // レイアウト内ナビゲーションの設定
      function setupLayoutNavigation(homeLayout: HTMLElement, docsLayout: HTMLElement) {
        if (!homeLayout || !docsLayout) {
          console.log('[setupLayoutNavigation] Missing layouts', { homeLayout: !!homeLayout, docsLayout: !!docsLayout });
          return;
        }

        console.log('[setupLayoutNavigation] Setting up navigation for', { homeLayout: homeLayout.id, docsLayout: docsLayout.id });

        // ホームレイアウト内のナビゲーションボタンを取得（ヘッダー部分）
        const homeNavButtons = homeLayout.querySelectorAll('button[onclick*="showDemo"], button[onclick*="showDocs"], .nav-link[onclick*="showDemo"], .nav-link[onclick*="showDocs"]');
        const docsNavButtons = docsLayout.querySelectorAll('button[onclick*="showDemo"], button[onclick*="showDocs"], .nav-link[onclick*="showDemo"], .nav-link[onclick*="showDocs"]');
        
        // レイアウト内のCTAボタンも取得（ヒーロー部分）
        const homeCtaLinks = homeLayout.querySelectorAll('a[href="#docs"], .cta-secondary[href="#docs"]');
        const homeCtaButtons = homeLayout.querySelectorAll('button.button-primary, .button-primary');
        
        console.log('[setupLayoutNavigation] Found CTA elements', { 
          homeCtaLinks: homeCtaLinks.length,
          homeCtaButtons: homeCtaButtons.length
        });

        console.log('[setupLayoutNavigation] Found buttons', { 
          homeNavButtons: homeNavButtons.length, 
          docsNavButtons: docsNavButtons.length 
        });

        // ホームレイアウトのボタン処理
        homeNavButtons.forEach((button, index) => {
          const buttonText = button.textContent || '';
          const isDocsButton = buttonText.includes('Docs') || buttonText.includes('Documentation');
          const buttonType = isDocsButton ? 'docs' : 'home';
          
          console.log('[setupLayoutNavigation] Processing nav button', { 
            index, 
            text: buttonText, 
            type: buttonType,
            onclick: button.getAttribute('onclick')
          });
          
          const newButton = button.cloneNode(true) as HTMLElement;
          
          // Remove onclick attribute to prevent original function execution
          newButton.removeAttribute('onclick');
          
          button.parentNode?.replaceChild(newButton, button);
          
          newButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log(`[setupLayoutNavigation] ${buttonType} button clicked`, { text: buttonText });
            
            if (isDocsButton) {
              console.log('[setupLayoutNavigation] Switching to docs layout');
              homeLayout.style.display = 'none';
              docsLayout.style.display = 'block';
            } else {
              console.log('[setupLayoutNavigation] Already on home');
            }
          });
        });

        // ドキュメントレイアウトのボタン処理
        docsNavButtons.forEach((button, index) => {
          const buttonText = button.textContent || '';
          const isHomeButton = buttonText.includes('Home') || buttonText.includes('🏠');
          const buttonType = isHomeButton ? 'home' : 'docs';
          
          console.log('[setupLayoutNavigation] Processing docs nav button', { 
            index, 
            text: buttonText, 
            type: buttonType,
            onclick: button.getAttribute('onclick')
          });
          
          const newButton = button.cloneNode(true) as HTMLElement;
          
          // Remove onclick attribute to prevent original function execution
          newButton.removeAttribute('onclick');
          
          button.parentNode?.replaceChild(newButton, button);
          
          newButton.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log(`[setupLayoutNavigation] ${buttonType} button clicked in docs layout`, { text: buttonText });
            
            if (isHomeButton) {
              console.log('[setupLayoutNavigation] Switching to home layout');
              docsLayout.style.display = 'none';
              homeLayout.style.display = 'block';
            } else {
              console.log('[setupLayoutNavigation] Already on docs');
            }
          });
        });

        // CTAリンクの処理（HeroFocusedの#docsリンク）
        homeCtaLinks.forEach((link, index) => {
          console.log('[setupLayoutNavigation] Processing CTA link', { index, text: link.textContent, href: link.getAttribute('href') });
          const newLink = link.cloneNode(true) as HTMLElement;
          link.parentNode?.replaceChild(newLink, link);
          
          newLink.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('[setupLayoutNavigation] CTA link clicked', { text: newLink.textContent });
            homeLayout.style.display = 'none';
            docsLayout.style.display = 'block';
          });
        });

        // CTAボタンの処理（Minimalの.button-primaryボタン）
        homeCtaButtons.forEach((button, index) => {
          console.log('[setupLayoutNavigation] Processing CTA button', { index, text: button.textContent });
          const newButton = button.cloneNode(true) as HTMLElement;
          button.parentNode?.replaceChild(newButton, button);
          
          newButton.addEventListener('click', (e) => {
            e.preventDefault();
            console.log('[setupLayoutNavigation] CTA button clicked', { text: newButton.textContent });
            homeLayout.style.display = 'none';
            docsLayout.style.display = 'block';
          });
        });
      }
    });
  </script>