---
interface Props {
  currentLayout?: string;
}

const { currentLayout = 'hero-focused' } = Astro.props;
---

<div class="layout-selector">
  <select id="layout-selector" class="layout-select" data-current={currentLayout}>
    <option value="hero-focused" selected={currentLayout === 'hero-focused'}>Hero Focused</option>
    <option value="minimal" selected={currentLayout === 'minimal'}>Minimal</option>
    <option value="grid" disabled>Grid (Coming Soon)</option>
    <option value="sidebar" disabled>Sidebar (Coming Soon)</option>
    <option value="content-heavy" disabled>Content Heavy (Coming Soon)</option>
  </select>
</div>

<style>
  .layout-select {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .layout-select:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .layout-select option {
    background: #2d3748;
    color: white;
  }
</style>

<script>
  class LayoutSelector {
    private selector: HTMLSelectElement;
    private onLayoutChange?: (layout: string) => void;

    constructor(selector: HTMLSelectElement) {
      this.selector = selector;
      this.init();
    }

    init() {
      this.selector.addEventListener('change', this.handleChange.bind(this));
    }

    handleChange(e: Event) {
      const target = e.target as HTMLSelectElement;
      const selectedLayout = target.value;
      
      if (this.onLayoutChange) {
        this.onLayoutChange(selectedLayout);
      } else {
        this.defaultLayoutChange(selectedLayout);
      }
    }

    setOnLayoutChange(callback: (layout: string) => void) {
      this.onLayoutChange = callback;
    }

    getCurrentLayout(): string {
      return this.selector.value;
    }

    setCurrentLayout(layout: string) {
      this.selector.value = layout;
    }

    private defaultLayoutChange(selectedLayout: string) {
      const currentPath = window.location.pathname;
      const isDocsPage = currentPath.includes('/docs');
      
      let targetUrl: string;
      
      if (selectedLayout === 'hero-focused') {
        targetUrl = isDocsPage ? '/hero-focused/docs' : '/hero-focused';
      } else if (selectedLayout === 'minimal') {
        targetUrl = isDocsPage ? '/minimal/docs' : '/minimal';
      } else {
        alert(`${selectedLayout} レイアウトは準備中です！`);
        this.selector.value = this.selector.dataset.current || 'hero-focused';
        return;
      }
      
      window.location.href = targetUrl;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const layoutSelector = document.getElementById('layout-selector') as HTMLSelectElement;
    
    if (layoutSelector) {
      const selectorInstance = new LayoutSelector(layoutSelector);
      
      (window as any).layoutSelectorInstance = selectorInstance;
    }
  });
</script>