---
interface Props {
  currentPage?: 'demo' | 'docs';
}

const { currentPage = 'demo' } = Astro.props;

const isProd = import.meta.env.PROD;
const homePath = isProd ? '/gitlyte/' : '/';
const docsPath = isProd ? '/gitlyte/docs' : '/docs';
---

<div class="page-selector">
  <button id="demo-btn" class={`page-btn ${currentPage === 'demo' ? 'active' : ''}`} data-target="demo">Demo</button>
  <button id="docs-btn" class={`page-btn ${currentPage === 'docs' ? 'active' : ''}`} data-target="docs">Docs</button>
</div>

<style>
  .page-selector {
    display: flex;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.25rem;
    gap: 0.25rem;
  }

  .page-btn {
    background: transparent;
    border: none;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
  }

  .page-btn:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .page-btn.active {
    background: rgba(255, 255, 255, 0.3);
    font-weight: 600;
  }
</style>

<script>
  interface PageSelectorEvents {
    onShowDemo?: () => void;
    onShowDocs?: () => void;
  }

  class PageSelector {
    private demoBtn: HTMLButtonElement;
    private docsBtn: HTMLButtonElement;
    private events: PageSelectorEvents = {};

    constructor() {
      this.demoBtn = document.getElementById('demo-btn') as HTMLButtonElement;
      this.docsBtn = document.getElementById('docs-btn') as HTMLButtonElement;
      this.init();
    }

    init() {
      if (this.demoBtn) {
        this.demoBtn.addEventListener('click', this.handleDemoClick.bind(this));
      }
      if (this.docsBtn) {
        this.docsBtn.addEventListener('click', this.handleDocsClick.bind(this));
      }
    }

    setEvents(events: PageSelectorEvents) {
      this.events = events;
    }

    private handleDemoClick() {
      this.setActiveButton('demo');
      if (this.events.onShowDemo) {
        this.events.onShowDemo();
      }
    }

    private handleDocsClick() {
      this.setActiveButton('docs');
      if (this.events.onShowDocs) {
        this.events.onShowDocs();
      }
    }

    private setActiveButton(page: 'demo' | 'docs') {
      this.demoBtn.classList.toggle('active', page === 'demo');
      this.docsBtn.classList.toggle('active', page === 'docs');
    }

    showDemo() {
      this.handleDemoClick();
    }

    showDocs() {
      this.handleDocsClick();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const pageSelectorInstance = new PageSelector();
    (window as any).pageSelectorInstance = pageSelectorInstance;
    
    (window as any).showDemo = () => pageSelectorInstance.showDemo();
    (window as any).showDocs = () => pageSelectorInstance.showDocs();
  });
</script>