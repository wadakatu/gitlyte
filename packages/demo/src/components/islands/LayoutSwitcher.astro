---
interface Props {
  initialLayout?: string;
}

const { initialLayout = 'hero-focused' } = Astro.props;
---

<div id="layout-switcher" data-initial-layout={initialLayout}>
  <!-- レイアウト説明セクション -->
  <section id="demo-section" class="demo-info">
    <div class="container">
      <div class="info-content">
        <h2 id="layout-title">🌟 Hero Focused Layout</h2>
        <p id="layout-description">
          Hero Focusedレイアウトは、<strong>大きなヒーローセクション</strong>で訪問者の注意を引きつけ、
          プロジェクトの価値を即座に伝えるデザインです。
        </p>
        <div class="layout-features" id="layout-features">
          <div class="feature">
            <span class="feature-icon">🎯</span>
            <span>強力なファーストインプレッション</span>
          </div>
          <div class="feature">
            <span class="feature-icon">📊</span>
            <span>統計情報の視覚的表示</span>
          </div>
          <div class="feature">
            <span class="feature-icon">🚀</span>
            <span>明確なCTAボタン</span>
          </div>
        </div>
      </div>
    </div>
  </section>
</div>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .demo-info {
    background: #f8fafc;
    padding: 3rem 0;
    border-bottom: 1px solid #e2e8f0;
  }

  .info-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .info-content h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #2d3748;
  }

  .info-content p {
    font-size: 1.1rem;
    color: #718096;
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .layout-features {
    display: flex;
    gap: 2rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .feature {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    font-weight: 500;
  }

  .feature-icon {
    font-size: 1.2rem;
  }

  @media (max-width: 768px) {
    .layout-features {
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  interface LayoutInfo {
    title: string;
    description: string;
    features: Array<{ icon: string; text: string; }>;
  }

  class LayoutSwitcher {
    private initialLayout: string;
    private layoutTitle: HTMLElement;
    private layoutDescription: HTMLElement;
    private layoutFeatures: HTMLElement;
    private layoutInfo: Record<string, LayoutInfo>;

    constructor() {
      const switcher = document.getElementById('layout-switcher');
      this.initialLayout = switcher?.dataset.initialLayout || 'hero-focused';
      
      this.layoutTitle = document.getElementById('layout-title') as HTMLElement;
      this.layoutDescription = document.getElementById('layout-description') as HTMLElement;
      this.layoutFeatures = document.getElementById('layout-features') as HTMLElement;

      this.layoutInfo = {
        'hero-focused': {
          title: '🌟 Hero Focused Layout',
          description: 'Hero Focusedレイアウトは、<strong>大きなヒーローセクション</strong>で訪問者の注意を引きつけ、プロジェクトの価値を即座に伝えるデザインです。',
          features: [
            { icon: '🎯', text: '強力なファーストインプレッション' },
            { icon: '📊', text: '統計情報の視覚的表示' },
            { icon: '🚀', text: '明確なCTAボタン' }
          ]
        },
        'minimal': {
          title: '✨ Minimal Layout',
          description: 'Minimalレイアウトは、<strong>クリーンなタイポグラフィ</strong>と余白を活用し、コンテンツの読みやすさを最優先にしたデザインです。',
          features: [
            { icon: '📝', text: 'タイポグラフィ中心の設計' },
            { icon: '🎨', text: 'ミニマルなカラーパレット' },
            { icon: '📱', text: 'アクセシビリティ重視' }
          ]
        }
      };

      this.init();
    }

    init() {
      this.updateLayoutInfo(this.initialLayout);
    }

    updateLayoutInfo(layoutType: string) {
      const info = this.layoutInfo[layoutType];
      if (!info) return;

      if (this.layoutTitle) {
        this.layoutTitle.innerHTML = info.title;
      }
      
      if (this.layoutDescription) {
        this.layoutDescription.innerHTML = info.description;
      }
      
      if (this.layoutFeatures) {
        this.layoutFeatures.innerHTML = info.features.map(feature => 
          `<div class="feature">
            <span class="feature-icon">${feature.icon}</span>
            <span>${feature.text}</span>
          </div>`
        ).join('');
      }
    }

    switchLayout(layoutType: string) {
      this.updateLayoutInfo(layoutType);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const layoutSwitcherInstance = new LayoutSwitcher();
    (window as any).layoutSwitcherInstance = layoutSwitcherInstance;
  });
</script>