---
interface Props {
  currentPage?: 'demo' | 'docs';
  showLayoutSelector?: boolean;
  layoutName?: string;
}

const { currentPage = 'demo', showLayoutSelector = true, layoutName } = Astro.props;

const isProd = import.meta.env.PROD;
const homePath = isProd ? '/gitlyte/' : '/';
const docsPath = isProd ? '/gitlyte/docs' : '/docs';
---

<header class="demo-header">
  <div class="container">
    <div class="demo-nav">
      <div class="demo-brand">
        <a href={homePath} class="brand-link">
          <h1>🎨 GitLyte Layout Demo{layoutName && ` - ${layoutName}`}</h1>
        </a>
      </div>
      <div class="nav-controls">
        <div class="page-selector">
          <a href={homePath} class={`page-btn ${currentPage === 'demo' ? 'active' : ''}`}>Demo</a>
          <a href={docsPath} class={`page-btn ${currentPage === 'docs' ? 'active' : ''}`}>Docs</a>
        </div>
        {showLayoutSelector && (
          <div class="layout-selector">
            <select id="layout-selector" class="layout-select">
              <option value="hero-focused" selected>Hero Focused</option>
              <option value="minimal">Minimal</option>
              <option value="grid" disabled>Grid (Coming Soon)</option>
              <option value="sidebar" disabled>Sidebar (Coming Soon)</option>
              <option value="content-heavy" disabled>Content Heavy (Coming Soon)</option>
            </select>
          </div>
        )}
      </div>
    </div>
  </div>
</header>

<style>
  .demo-header {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    position: sticky;
    top: 0;
    z-index: 2000;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .demo-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    min-height: 4rem;
  }

  .demo-brand .brand-link {
    text-decoration: none;
    color: inherit;
    transition: opacity 0.2s ease;
  }

  .demo-brand .brand-link:hover {
    opacity: 0.8;
  }

  .demo-brand h1 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
  }

  .nav-controls {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .page-selector {
    display: flex;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.25rem;
    gap: 0.25rem;
  }

  .page-btn {
    background: transparent;
    border: none;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.9rem;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
    display: inline-block;
  }

  .page-btn:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .page-btn.active {
    background: rgba(255, 255, 255, 0.3);
    font-weight: 600;
  }

  .layout-select {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .layout-select:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .layout-select option {
    background: #2d3748;
    color: white;
  }


  @media (max-width: 768px) {
    .demo-nav {
      flex-direction: column;
      gap: 1rem;
    }

    .demo-brand h1 {
      font-size: 1.25rem;
    }

    .nav-controls {
      flex-direction: column;
      gap: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const layoutSelector = document.getElementById('layout-selector') as HTMLSelectElement;
    
    if (layoutSelector) {
      layoutSelector.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedLayout = target.value;
        
        // 現在のページがメインデモページかどうか判定
        const currentPath = window.location.pathname;
        const isMainDemo = currentPath === '/' || currentPath === '/index.html';
        const isMainDocs = currentPath === '/docs' || currentPath === '/docs/';
        
        if (isMainDemo || isMainDocs) {
          // メインページでは元のswitchLayout関数を使用（存在する場合）
          if (typeof (window as any).switchLayout === 'function') {
            (window as any).switchLayout(selectedLayout);
          } else {
            // switchLayout関数が存在しない場合は個別ページへ遷移
            navigateToLayout(selectedLayout, currentPath.includes('/docs'));
          }
        } else {
          // 個別ページでは該当ページに遷移
          navigateToLayout(selectedLayout, currentPath.includes('/docs'));
        }
      });
    }
    
    function navigateToLayout(selectedLayout: string, isDocsPage: boolean) {
      let targetUrl: string;
      
      if (selectedLayout === 'hero-focused') {
        targetUrl = isDocsPage ? '/hero-focused/docs' : '/hero-focused';
      } else if (selectedLayout === 'minimal') {
        targetUrl = isDocsPage ? '/minimal/docs' : '/minimal';
      } else {
        alert(`${selectedLayout} レイアウトは準備中です！`);
        return;
      }
      
      window.location.href = targetUrl;
    }
  });
</script>