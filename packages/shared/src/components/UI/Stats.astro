---
export interface Props {
  stats: {
    stars: number;
    forks: number;
    issues: number;
  };
  variant?: 'horizontal' | 'vertical' | 'compact';
  className?: string;
}

const { stats, variant = 'horizontal', className = '' } = Astro.props;

function formatNumber(num: number): string {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toString();
}
---

<div class={`stats stats-${variant} ${className}`}>
  <div class="stat-item">
    <div class="stat-icon">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"></polygon>
      </svg>
    </div>
    <div class="stat-content">
      <div class="stat-number">{formatNumber(stats.stars)}</div>
      <div class="stat-label">Stars</div>
    </div>
  </div>
  
  <div class="stat-item">
    <div class="stat-icon">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="3"></circle>
        <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"></path>
      </svg>
    </div>
    <div class="stat-content">
      <div class="stat-number">{formatNumber(stats.forks)}</div>
      <div class="stat-label">Forks</div>
    </div>
  </div>
  
  <div class="stat-item">
    <div class="stat-icon">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <path d="M12 6v6l4 2"></path>
      </svg>
    </div>
    <div class="stat-content">
      <div class="stat-number">{formatNumber(stats.issues)}</div>
      <div class="stat-label">Issues</div>
    </div>
  </div>
</div>

<style>
  .stats {
    display: flex;
    gap: var(--space-lg);
  }
  
  .stats-horizontal {
    flex-direction: row;
    align-items: center;
  }
  
  .stats-vertical {
    flex-direction: column;
    align-items: stretch;
  }
  
  .stats-compact {
    flex-direction: row;
    align-items: center;
    gap: var(--space-md);
  }
  
  .stat-item {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-sm);
    border-radius: var(--radius-md);
    transition: all 0.2s ease;
  }
  
  .stats-vertical .stat-item {
    justify-content: flex-start;
    padding: var(--space-md);
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
  }
  
  .stats-compact .stat-item {
    padding: var(--space-xs) var(--space-sm);
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .stat-item:hover {
    background-color: var(--color-surface);
    transform: translateY(-1px);
  }
  
  .stats-compact .stat-item:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }
  
  .stat-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-primary);
  }
  
  .stats-compact .stat-icon {
    color: rgba(255, 255, 255, 0.9);
  }
  
  .stat-content {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }
  
  .stats-compact .stat-content {
    flex-direction: row;
    gap: var(--space-xs);
    align-items: baseline;
  }
  
  .stat-number {
    font-weight: 600;
    font-size: var(--text-lg);
    color: var(--color-text-primary);
    line-height: 1;
  }
  
  .stats-compact .stat-number {
    font-size: var(--text-sm);
    color: white;
  }
  
  .stat-label {
    font-size: var(--text-xs);
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .stats-compact .stat-label {
    font-size: var(--text-xs);
    color: rgba(255, 255, 255, 0.8);
  }
  
  @media (max-width: 768px) {
    .stats-horizontal {
      flex-direction: column;
      gap: var(--space-sm);
    }
    
    .stats-compact {
      gap: var(--space-sm);
    }
    
    .stat-number {
      font-size: var(--text-base);
    }
  }
</style>